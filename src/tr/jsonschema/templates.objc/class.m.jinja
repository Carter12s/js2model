{% import '_obj-c_defs.jinja' as defs %}
{% include '_obj-c_head_comments.jinja' %}

#import "{{classDef.declName}}"
{%- if classDef.dependencies %}
{%- for dep in classDef.dependencies %}
#import "{{dep}}.h"
{%- endfor -%}
{%- endif %}
#import "TRJSONModelLoader.h"

#define valueWithSel(sel) [NSValue valueWithPointer: @selector(sel)]

{%- set metaClassName = classDef.name + "Schema" -%}
{%- set metaClassVar = classDef.name + "SchemaInstance" -%}

{# #}
@implementation {{metaClassName}}

- (instancetype)init
{
    self = [super init];
    if (self) {


{#
    Macro that renders code to add properties to the appropriate dictionary
#}
{%- macro metaProps(dictName, props) -%}
{% if props|length %}
        [self.{{dictName}} addEntriesFromDictionary: @{
    {%- for v in props %}
        {% if v.isArray %}
                {% call(varDef, varType, isRef, itemsType) defs.renderWithConvertedType(v) -%}
                    @"{{v.name}}": [JSONPropertyMeta initWithGetter:@selector({{v.name}})
                                                             setter:@selector(set{{v.name|firstupper}}:)
                                                             type:[{{ varType|replace(' *','') }} class]
                                                         itemType:[{{ itemsType|replace(' *','') }} class]],
                {%- endcall %}
        {% elif v.schema_type is equalto "object" %}
                {% call(varDef, varType, isRef, itemsType) defs.renderWithConvertedType(v) -%}
                    @"{{v.name}}": [JSONPropertyMeta initWithGetter:@selector({{v.name}})
                                                             setter:@selector(set{{v.name|firstupper}}:)
                                                               type:[{{ varType|replace(' *','') }} class]],
                {%- endcall %}
        {% else %}
                    @"{{v.name}}": [JSONPropertyMeta initWithGetter:@selector({{v.name}})
                                                             setter:@selector(set{{v.name|firstupper}}:)],
        {%- endif %}
    {%- endfor %}
        }];
{%- endif %}
{%- endmacro -%}

{%- set objectVars = classDef.variable_defs|selectattr("schema_type", "equalto", "object")|rejectattr("isArray")|list -%}
{{ metaProps("objects", objectVars) }}
{%- set arrayVars = classDef.variable_defs|selectattr("schema_type", "equalto", "object")|selectattr("isArray")|list -%}
{{ metaProps("arrays", arrayVars) }}
{{ metaProps("strings", classDef.variable_defs|selectattr("schema_type", "equalto", "string")|list) }}
{{ metaProps("booleans", classDef.variable_defs|selectattr("schema_type", "equalto", "boolean")|list) }}
{{ metaProps("numbers", classDef.variable_defs|selectattr("schema_type", "equalto", "number")|list) }}
{{ metaProps("integers", classDef.variable_defs|selectattr("schema_type", "equalto", "number")|list) }}
    }
    return self;
}
@end

static {{metaClassName}} *{{metaClassVar}};

@implementation {{classDef.name}}{
    NSMutableDictionary *_additionalProperties;
}

+(void)initialize {

    if( self == [{{classDef.name}} class] )
    {
        {{metaClassVar}} = [{{metaClassName}} new];
    }
}

{% if classDef.hasVarDefaults -%}
- (instancetype)init
{
    self = [super init];
    if (self) {
    	// custom intialization code
        _additionalProperties = [NSMutableDictionary new];

{%- for v in classDef.variable_defs -%}
{{ defs.initVarToDefault(v) }}
{%- endfor %}
    }
    return self;
}
{% endif %}

- (instancetype) initWithJSONData:(NSData *)data
                            error:(NSError* __autoreleasing *)error {
    self = [self init];
    if (self) {
        [TRJSONModelLoader load:self withJSONData:data error:error];
    }
    return self;
}

/** Parses JSON data and creates an Objective-C instance.

 @param cls Class type of top-most instance.
 @param filename Name of file with JSON data to be parsed.
 @param error Non-nil if any parsings errors occured.
 */
- (instancetype) initWithJSONFromFileNamed:(NSString *)filename
                                     error:(NSError* __autoreleasing *)error {

    self = [self init];
    if (self) {
        [TRJSONModelLoader load:self withJSONFromFileNamed:filename error:error];
    }
    return self;
}

{%- for v in classDef.variable_defs -%}
{{ defs.lazyPropGetter(v) }}
{%- endfor %}

- (JSONInstanceMeta *)objectForPropertyNamed:(NSString *)propertyName {

    return [{{metaClassVar}} objectForPropertyNamed:propertyName forInstance:self];
}

- (JSONInstanceMeta *)arrayForPropertyNamed:(NSString *)propertyName {
    return [{{metaClassVar}} arrayForPropertyNamed:propertyName forInstance:self];
}

- (void)setString:(NSString *)val forProperty:(NSString *)propertyName {
    [{{metaClassVar}} setString:val forProperty:propertyName forInstance:self];
}

- (void)setNumber:(NSNumber *)val forProperty:(NSString *)propertyName {
    [{{metaClassVar}} setNumber:val forProperty:propertyName forInstance:self];
}

- (void)setInteger:(NSNumber *)val forProperty:(NSString *)propertyName {
    [{{metaClassVar}} setInteger:val forProperty:propertyName forInstance:self];
}

- (void)setBoolean:(NSNumber *)val forProperty:(NSString *)propertyName {
    [{{metaClassVar}} setBoolean:val forProperty:propertyName forInstance:self];
}

- (void)setNullForProperty:(NSString *)propertyName {
    [{{metaClassVar}} setNullForProperty:propertyName forInstance:self];
}

+(JSONModelSchema *)modelSchema {
    return {{metaClassVar}} ;
}

-(NSMutableDictionary*)additionalProperties {
    return _additionalProperties;
}

-(void)setValue:(id)value forAdditionalProperty:(NSString*)propertyName {
    [_additionalProperties setObject:value forKey:propertyName];
}

-(id)valueForAdditionalProperty:(NSString*)propertyName {
    return [_additionalProperties valueForKey:propertyName];
}

@end

